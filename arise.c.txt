#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

pthread_mutex_t m1,m2,m3;
pthread_cond_t c1,c2;



void* ARISE(void* arg)
{
	//printf("*");
	pthread_mutex_lock(&m1);
	pthread_mutex_lock(&m2);
		printf("ARISE\n");
	pthread_cond_wait(&c1,&m2);
		printf("ARISE\n");
	pthread_mutex_unlock(&m1);
	
}

void* AWARE(void* arg)
{
	pthread_mutex_lock(&m2);
	pthread_mutex_lock(&m3);
	printf("AWARE\n");
	pthread_cond_wait(&c2,&m3);
	printf("AWARE\n");
	pthread_mutex_unlock(&m2);
		pthread_cond_signal(&c1);
}
void* STOPNOT(void* arg)
{
	pthread_mutex_lock(&m3);
		printf("STOPNOT\n");
	
//	printf("STOPNOT");
	pthread_mutex_unlock(&m3);
		pthread_cond_signal(&c2);


}

int main()
{
	pthread_t th[3];
	printf(" ");
	pthread_mutex_init(&m1,NULL);
		pthread_mutex_init(&m2,NULL);
			pthread_mutex_init(&m3,NULL);
	pthread_cond_init(&c1,NULL);
		pthread_cond_init(&c2,NULL);
//			pthread_cond_init(&c3,NULL);

/*	for(int i=0;i<3;i++)
	{
		printf("#");
		if(pthread_create(&th[i],NULL,&ARISE,NULL)!=0)
		{
			perror("Thread Not Created");
		}
		else if(pthread_create(&th[i],NULL,&AWARE,NULL)!=0)
		{
			perror("Thread Not Created");
		}
		else if(pthread_create(&th[i],NULL,&STOPNOT,NULL)!=0)
		{
			perror("Thread Not Created");
		}
	}*/
	pthread_create(&th[0],NULL,&ARISE,NULL);
	pthread_create(&th[1],NULL,&AWARE,NULL);
	pthread_create(&th[2],NULL,&STOPNOT,NULL);
	
/*		for (int i = 0; i < 3; i++) 
    {
    	pthread_join(th[i], NULL);
	 }*/
	 	pthread_join(th[0], NULL);
	 		pthread_join(th[1], NULL);
	 			pthread_join(th[2], NULL);

	
	pthread_mutex_destroy(&m1);
		pthread_mutex_destroy(&m2);
			pthread_mutex_destroy(&m3);
    pthread_cond_destroy(&c1);
     pthread_cond_destroy(&c2);
  //    pthread_cond_destroy(&c3);
	return 0;
}